<#
.SYNOPSIS
    Waits for network, checks if the installed Google Chrome version is on a critical list, and sends a summary report to Slack.
.DESCRIPTION
    This script is designed for GPO startup to perform a security check on Google Chrome.
    - It waits for an active internet connection for up to 5 minutes.
    - It identifies the local Chrome version.
    - Compares the version against a hardcoded list of critical vulnerabilities.
    - If the version is critical, it initiates an update in the background.
    - Sends a concise summary report to Slack, with the full verbose log attached.
.NOTES
    Author: Deraldo Palomino Filho 
    Data: 12/08/2025
    Version: 9.0 (Slack Summary)
#>
[CmdletBinding()]
param(
    # A URL do Webhook do Slack está definida permanentemente abaixo.
    [string]$SlackWebhookUrl = "", # Insira a URL do Webhook do Slack aqui para receber relatórios.

    [string[]]$CriticalVersions = @(
        '125.0.6422.112',
        '125.0.6422.113',
        '126.0.6478.56',
        '126.0.6478.57',
        '138.0.7204.157',
        '138.0.7204.182',
        '138.0.7204.156'
    ),

    [string]$LogFilePath = "C:\Temp\Chrome_Update_Check_Summary.log"
)

# --- Global Variables & Setup ---
$Global:LogBuffer = [System.Collections.ArrayList]::new()
$computerName = $env:COMPUTERNAME
$status = "Indefinido"
$reportIcon = ":white_check_mark:"

# --- Function Definitions ---

function Write-Log {
    param([string]$Message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "[$timestamp] - $Message"
    $Global:LogBuffer.Add($logMessage) | Out-Null
    try {
        $logDir = Split-Path $LogFilePath -Parent
        if (-not (Test-Path $logDir)) { New-Item -ItemType Directory -Path $logDir -ErrorAction Stop | Out-Null }
        $logMessage | Out-File -FilePath $LogFilePath -Append -Encoding utf8 -ErrorAction Stop
    } catch {
        Write-Warning "Failed to write to local log file: $($_.Exception.Message)"
    }
    Write-Host $logMessage
}

function WaitFor-Network {
    param([int]$TimeoutMinutes = 5)
    Write-Log "STEP: Checking for network connectivity..."
    $timeout = (Get-Date).AddMinutes($TimeoutMinutes)
    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
    while ((Get-Date) -lt $timeout) {
        if (Test-NetConnection -ComputerName www.google.com -Port 443 -WarningAction SilentlyContinue) {
            $stopwatch.Stop()
            Write-Log "INFO: Network connection is active (took $($stopwatch.Elapsed.Seconds) seconds)."
            return [PSCustomObject]@{ Success = $true; Message = "✅ Rede: Conexão estabelecida em $($stopwatch.Elapsed.Seconds)s." }
        }
        Start-Sleep -Seconds 15
    }
    Write-Log "FATAL: Network connection timeout after $TimeoutMinutes minutes."
    return [PSCustomObject]@{ Success = $false; Message = "❌ Rede: Timeout de $TimeoutMinutes minutos atingido." }
}

function Get-LocalChromeVersion {
    Write-Log "STEP: Searching for local Chrome installation..."
    $searchPaths = @(
        "$env:ProgramFiles\Google\Chrome\Application\chrome.exe",
        "${env:ProgramFiles(x86)}\Google\Chrome\Application\chrome.exe",
        "$env:LOCALAPPDATA\Google\Chrome\Application\chrome.exe"
    )
    foreach ($path in $searchPaths) {
        if (Test-Path -Path $path -PathType Leaf) {
            $version = [version](Get-Item $path).VersionInfo.ProductVersion
            Write-Log "INFO: Found Chrome at '$path'. Version: $version"
            return [PSCustomObject]@{ Success = $true; Version = $version; Message = "ℹ️ Versão Local: $version" }
        }
    }
    Write-Log "INFO: Google Chrome is not installed on this system."
    return [PSCustomObject]@{ Success = $false; Version = $null; Message = "❌ Chrome não encontrado." }
}

function Start-ChromeUpdate {
    Write-Log "STEP: Attempting to start background update..."
    $googleUpdatePath = "${env:ProgramFiles(x86)}\Google\Update\GoogleUpdate.exe"
    if (Test-Path $googleUpdatePath) {
        Write-Log "INFO: Using Google Update (preferred method)."
        Start-Process -FilePath $googleUpdatePath -ArgumentList "/update"
        return [PSCustomObject]@{ Success = $true; Message = "⬆️ Atualização iniciada via Google Update." }
    }
    $wingetPath = Get-Command winget -ErrorAction SilentlyContinue
    if ($wingetPath) {
        Write-Log "INFO: Using Winget (fallback method)."
        $wingetArgs = "upgrade Google.Chrome --accept-package-agreements --accept-source-agreements --silent --disable-interactivity"
        Start-Process -FilePath $wingetPath.Source -ArgumentList $wingetArgs
        return [PSCustomObject]@{ Success = $true; Message = "⬆️ Atualização iniciada via Winget." }
    }
    Write-Log "ERROR: No update method available."
    return [PSCustomObject]@{ Success = $false; Message = "❌ Falha ao iniciar atualização (nenhum método disponível)." }
}

function Send-SlackNotification {
    param(
        [string]$FinalStatus,
        [string]$Icon,
        [string[]]$SummaryPoints,
        [string]$FullLog
    )
    Write-Log "STEP: Sending summary report to Slack..."
    $summaryText = $SummaryPoints -join "`n"
    $reportTitle = "*Relatório de Atualização do Chrome*`n*Dispositivo:* $computerName`n*Status Final:* $FinalStatus"
    
    $mainMessage = "$reportTitle`n`n*Resumo das Etapas:*`n$summaryText"

    $payload = @{
        text       = $mainMessage;
        icon_emoji = $Icon;
        attachments = @(
            @{
                color = "#808080"; # Grey
                title = "Log Detalhado";
                text  = '```' + $FullLog + '```';
                mrkdwn_in = @("text");
            }
        )
    }
    if ($FinalStatus -like '*Crítico*') { $payload.attachments[0].color = "#ff0000" }
    elseif ($FinalStatus -like '*Falha*') { $payload.attachments[0].color = "#ff0000" }
    elseif ($FinalStatus -like '*Rede*') { $payload.attachments[0].color = "#ffA500" }
    
    $jsonPayload = $payload | ConvertTo-Json -Compress -Depth 10
    $utf8Bytes = [System.Text.Encoding]::UTF8.GetBytes($jsonPayload)
    try {
        Invoke-RestMethod -Uri $SlackWebhookUrl -Method Post -Body $utf8Bytes -ContentType 'application/json; charset=utf-8' -ErrorAction Stop
        Write-Log "INFO: Slack notification sent successfully."
    } catch {
        Write-Log "FATAL: Failed to send Slack notification. $($_.Exception.Message)"
    }
}

# --- Main Execution Logic ---
$summary = [System.Collections.ArrayList]::new()
try {
    Write-Log "--- Starting Chrome Critical Version Check (v9.0) on $computerName ---"

    $networkResult = WaitFor-Network
    $summary.Add($networkResult.Message) | Out-Null
    if (-not $networkResult.Success) {
        $status = "Falha (Sem Rede)"
        $reportIcon = ":no_entry:"
        throw "Exiting due to network timeout."
    }

    $versionResult = Get-LocalChromeVersion
    $summary.Add($versionResult.Message) | Out-Null
    if (-not $versionResult.Success) {
        $status = "Chrome Não Encontrado"
        $reportIcon = ":question:"
        throw "Execution stopped as Chrome is not installed."
    }
    $localVersion = $versionResult.Version

    Write-Log "STEP: Comparing local version ($localVersion) with critical list..."
    $criticalVersionsTyped = $CriticalVersions | ForEach-Object { [version]$_ }
    if ($criticalVersionsTyped -contains $localVersion) {
        $status = "Ação Requerida (Crítico)"
        $reportIcon = ":warning:"
        $summary.Add("🚨 Versão Crítica Encontrada!") | Out-Null
        
        Write-Log "STEP: Initiating update process..."
        $updateResult = Start-ChromeUpdate
        $summary.Add($updateResult.Message) | Out-Null
        if (-not $updateResult.Success) {
            $status = "Falha (Sem Método)"
            $reportIcon = ":x:"
        }
    } else {
        $status = "Atualizado (Não Crítico)"
        $reportIcon = ":white_check_mark:"
        $summary.Add("✅ Versão OK (Não Crítica).") | Out-Null
        Write-Log "RESULT: OK. No action needed."
    }
}
catch {
    if ($status -eq "Indefinido") {
        $status = "Falha na Execução"
        $reportIcon = ":x:"
    }
    $summary.Add("❌ Script finalizado com erro.") | Out-Null
    Write-Log "ERROR: An error occurred during execution. Message: $($_.Exception.Message)"
}
finally {
    Write-Log "--- Check Finished. Preparing final report. ---"
    $logText = $Global:LogBuffer -join "`n"
    Send-SlackNotification -FinalStatus $status -Icon $reportIcon -SummaryPoints $summary -FullLog $logText
}

exit 0
